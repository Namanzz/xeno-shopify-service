// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                   String    @id @default(uuid())
  name                 String
  shopifyDomain        String    @unique
  shopifyAccessToken   String // In a real app, encrypt this!
  createdAt            DateTime  @default(now())

  // Relations
  customers Customer[]
  products  Product[]
  orders    Order[]
}

model Customer {
  id                  String   @id @default(uuid())
  shopifyCustomerId   BigInt   @unique
  email               String?
  firstName           String?
  lastName            String?
  totalSpent          Float    @default(0)
  createdAt           DateTime @default(now())

  // Multi-tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, shopifyCustomerId])
}

model Product {
  id                 String   @id @default(uuid())
  shopifyProductId   BigInt   @unique
  title              String
  price              Float
  createdAt          DateTime @default(now())

  // Multi-tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, shopifyProductId])
}

model Order {
  id                String   @id @default(uuid())
  shopifyOrderId    BigInt   @unique
  totalPrice        Float
  currency          String
  shopifyCreatedAt  DateTime
  createdAt         DateTime @default(now())

  // Multi-tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, shopifyOrderId])
}
